import "sdi/types.h";
#include <types.idl>

[uuid(IF_MEMORYSERVER_ID)]
interface IF_MEMORYSERVER {
	L4_Word_t map_io_pages(in L4_ThreadId_t threadid, in L4_Word_t virt_start_address,
		in L4_Word_t phys_start_address, in int size);

	L4_Word_t map_anon_pages(in L4_ThreadId_t threadid, in L4_Word_t type,
		in L4_Word_t virt_start_address, in L4_Word_t size);

    // type: use type=0 for now
    // size: size of whole section
    // realsize: size of file content
    // Thus: size >= realsize
	L4_Word_t map_file_pages(in L4_ThreadId_t threadid, in L4_Word_t type,
		 in path_t path, in L4_Word_t offset, in L4_Word_t virt_start_address,
		 in L4_Word_t size, in L4_Word_t realsize);

	void unmap_pages(in L4_Word_t virt_start_address);

	void startup(in L4_ThreadId_t threadid, in L4_Word_t ip, in L4_Word_t sp);

    // will be called by task server when task/thread is killed
	void destroyed(in L4_ThreadId_t threadid);

	[kernelmsg(idl4::pagefault)]
	void pagefault(in L4_Word_t address, in L4_Word_t ip, in L4_Word_t privileges,
		out fpage page);
};
