/*****************************************************************
 * Source file : fileserver.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 23/08/2012 14:16
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <sdi/sdi.h>
#include <sdi/constants.h>
#include <l4io.h>

#include "fileserver-server.h"

/* Interface fileserver */

IDL4_INLINE L4_ThreadId_t  fileserver_Lookup_implementation(CORBA_Object  _caller, const path_t  path, path_t * remaining, idl4_server_environment * _env)

{
  L4_ThreadId_t  __retval = { local: { X: { 0, 0 } } };

  /* implementation of IF_NAMING::Lookup */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_LOOKUP(fileserver_Lookup_implementation);

IDL4_INLINE L4_Word_t  fileserver_get_file_id_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  L4_Word_t  __retval = 0;

  /* implementation of IF_FILE::get_file_id */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_GET_FILE_ID(fileserver_get_file_id_implementation);

IDL4_INLINE L4_Word_t  fileserver_read_implementation(CORBA_Object  _caller, const L4_Word_t  file_id, const L4_Word_t  offset, const L4_Word_t  count, buf_t * buf, idl4_server_environment * _env)

{
	buf->_maximum = 5;
	buf->_length = 5;
	strncpy( buf->_buffer, "Test\0", 5);
}

IDL4_PUBLISH_FILESERVER_READ(fileserver_read_implementation);

IDL4_INLINE L4_Word_t  fileserver_write_implementation(CORBA_Object  _caller, const L4_Word_t  file_id, const L4_Word_t  offset, const L4_Word_t  count, const buf_t * buf, idl4_server_environment * _env)

{
  L4_Word_t  __retval = 0;

  /* implementation of IF_FILE::write */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_WRITE(fileserver_write_implementation);

IDL4_INLINE L4_Word_t  fileserver_get_file_size_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  L4_Word_t  __retval = 0;

  /* implementation of IF_FILE::get_file_size */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_GET_FILE_SIZE(fileserver_get_file_size_implementation);

IDL4_INLINE L4_Word_t  fileserver_get_file_type_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  L4_Word_t  __retval = 0;

  /* implementation of IF_FILE::get_file_type */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_GET_FILE_TYPE(fileserver_get_file_type_implementation);

IDL4_INLINE CORBA_boolean  fileserver_remove_implementation(CORBA_Object  _caller, const L4_Word_t  file_id, idl4_server_environment * _env)

{
  CORBA_boolean  __retval = 0;

  /* implementation of IF_FILE::remove */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_REMOVE(fileserver_remove_implementation);

IDL4_INLINE CORBA_boolean  fileserver_mkdir_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  CORBA_boolean  __retval = 0;

  /* implementation of IF_FILE::mkdir */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_MKDIR(fileserver_mkdir_implementation);

IDL4_INLINE CORBA_boolean  fileserver_rmdir_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  CORBA_boolean  __retval = 0;

  /* implementation of IF_FILE::rmdir */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_RMDIR(fileserver_rmdir_implementation);

IDL4_INLINE L4_Word_t  fileserver_get_dir_size_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  L4_Word_t  __retval = 0;

  /* implementation of IF_FILE::get_dir_size */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_GET_DIR_SIZE(fileserver_get_dir_size_implementation);

IDL4_INLINE CORBA_boolean  fileserver_get_dir_entry_implementation(CORBA_Object  _caller, const path_t  path, const L4_Word_t  entry, path_t * buf, idl4_server_environment * _env)

{
  CORBA_boolean  __retval = 0;

  /* implementation of IF_FILE::get_dir_entry */
  
  return __retval;
}

IDL4_PUBLISH_FILESERVER_GET_DIR_ENTRY(fileserver_get_dir_entry_implementation);

void * fileserver_vtable_4[FILESERVER_DEFAULT_VTABLE_SIZE] = FILESERVER_DEFAULT_VTABLE_4;
void * fileserver_vtable_6[FILESERVER_DEFAULT_VTABLE_SIZE] = FILESERVER_DEFAULT_VTABLE_6;
void * fileserver_vtable_discard[FILESERVER_DEFAULT_VTABLE_SIZE] = FILESERVER_DEFAULT_VTABLE_DISCARD;
void ** fileserver_itable[8] = { fileserver_vtable_discard, fileserver_vtable_discard, fileserver_vtable_discard, fileserver_vtable_discard, fileserver_vtable_4, fileserver_vtable_discard, fileserver_vtable_6, fileserver_vtable_discard };

void  fileserver_server(void)

{
  L4_ThreadId_t  partner;
  L4_MsgTag_t  msgtag;
  idl4_msgbuf_t  msgbuf;
  long  cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < FILESERVER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, fileserver_itable[idl4_get_interface_id(&msgtag) & FILESERVER_IID_MASK][idl4_get_function_id(&msgtag) & FILESERVER_FID_MASK]);
        }
    }
}

void  fileserver_discard(void)

{
}

