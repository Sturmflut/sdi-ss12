/*****************************************************************
 * Source file : keyboarddriver.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 24/09/2012 21:36
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <l4io.h>

#include <sdi/sdi.h>
#include <sdi/io.h>

#include <if/iflogging.h>

#include "keyboarddriver-server.h"

#include "keyboarddriver.h"


/* Interface keyboarddriver */

IDL4_INLINE void  keyboarddriver_interrupt_implementation(CORBA_Object  _caller, idl4_server_environment * _env)

{
	char logbuf[30];
	char scancode;

	CORBA_Environment env(idl4_default_environment);

	scancode = inb(0x60);
	snprintf(logbuf, sizeof(logbuf), "[KEYBOARD] Interrupt! Code %i", scancode);
	IF_LOGGING_LogMessage((CORBA_Object)loggerid, logbuf, &env);

}

IDL4_PUBLISH_KEYBOARDDRIVER_INTERRUPT(keyboarddriver_interrupt_implementation);

IDL4_INLINE CORBA_boolean  keyboarddriver_getKey_implementation(CORBA_Object  _caller, CORBA_long * key, CORBA_char * modifier, idl4_server_environment * _env)

{
  CORBA_boolean  __retval = 0;

  /* implementation of IF_KEYBOARDDRIVER::getKey */
  
  return __retval;
}

IDL4_PUBLISH_KEYBOARDDRIVER_GETKEY(keyboarddriver_getKey_implementation);

void * keyboarddriver_vtable_10[KEYBOARDDRIVER_DEFAULT_VTABLE_SIZE] = KEYBOARDDRIVER_DEFAULT_VTABLE_10;
void * keyboarddriver_vtable_discard[KEYBOARDDRIVER_DEFAULT_VTABLE_SIZE] = KEYBOARDDRIVER_DEFAULT_VTABLE_DISCARD;
void ** keyboarddriver_itable[16] = { keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_10, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard, keyboarddriver_vtable_discard };
void * keyboarddriver_ktable[KEYBOARDDRIVER_DEFAULT_KTABLE_SIZE] = KEYBOARDDRIVER_DEFAULT_KTABLE;

void  keyboarddriver_server(void)

{
  L4_ThreadId_t  partner;
  L4_MsgTag_t  msgtag;
  idl4_msgbuf_t  msgbuf;
  long  cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < KEYBOARDDRIVER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          if (IDL4_EXPECT_FALSE(idl4_is_kernel_message(msgtag)))
            idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, keyboarddriver_ktable[idl4_get_kernel_message_id(msgtag) & KEYBOARDDRIVER_KID_MASK]);
            else idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, keyboarddriver_itable[idl4_get_interface_id(&msgtag) & KEYBOARDDRIVER_IID_MASK][idl4_get_function_id(&msgtag) & KEYBOARDDRIVER_FID_MASK]);
        }
    }
}

void  keyboarddriver_discard(void)

{
}

