/*****************************************************************
 * Source file : driver.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 17/07/2012 18:41
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <sdi/sdi.h>
#include <sdi/constants.h>
#include "driver-server.h"

#include <if/iflogging.h>

#include "root.h"

typedef struct {
        char path[SDI_NAMESERVER_MAX_ENTRY_LEN + 1];
        L4_ThreadId_t registrant;
} name_entry_t;

name_entry_t drivers[SDI_NAMESERVER_MAX_ENTRIES];

CORBA_Environment env(idl4_default_environment);




/* Interface driver */

/**
   Find the next free name database entry

   @return index on success, -1 if database full
 */
int find_free_entry()
{
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++)
                if (drivers[i].registrant == L4_nilthread)
                        return i;

        return -1;
}

void clear_name_database()
{
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++) {
                drivers[i].path[0] = '\0';
                drivers[i].registrant = L4_nilthread;
        }
}



IDL4_INLINE void  driver_register_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
        int i = find_free_entry();

        if (i >= 0) {
                strncpy(drivers[i].path, path, SDI_NAMESERVER_MAX_ENTRY_LEN);
                drivers[i].registrant = _caller;
        }else
                printf("[NAMESERVER] Error: Could not register thread %lx for path \"%s\", database full\n", _caller.raw, path);

        return;  
}

IDL4_PUBLISH_DRIVER_REGISTER(driver_register_implementation);

IDL4_INLINE void  driver_deregister_implementation(CORBA_Object  _caller, idl4_server_environment * _env)

{
        /* Remove all entries for the caller thread */
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++)
                if (drivers[i].registrant == _caller) {
                        drivers[i].registrant = L4_nilthread;
                        drivers[i].path[0] = '\0';
                }

        return;
}

IDL4_PUBLISH_DRIVER_DEREGISTER(driver_deregister_implementation);

IDL4_INLINE L4_ThreadId_t  driver_Lookup_implementation(CORBA_Object  _caller, const path_t  path, path_t * remaining, idl4_server_environment * _env)

{
        int offset = 0;
        char buf[256];

        if(path[0] == '/')
                offset = 1;

        snprintf(buf, 256, "[DRIVER] Lookup %s", path[offset]);

        IF_LOGGING_LogMessage((CORBA_Object)loggerid, buf, &env);

        /* Find the first database entry matching the query */
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++)
                if (strncmp(path, drivers[i].path, strlen(drivers[i].path)) == 0) {
                        strcpy(*remaining, &path[strlen(drivers[i].path) + offset]);
                        return drivers[i].registrant;
                }

        strcpy(*remaining, path);
        return L4_nilthread;
}

IDL4_PUBLISH_DRIVER_LOOKUP(driver_Lookup_implementation);

void * driver_vtable_5[DRIVER_DEFAULT_VTABLE_SIZE] = DRIVER_DEFAULT_VTABLE_5;
void * driver_vtable_9[DRIVER_DEFAULT_VTABLE_SIZE] = DRIVER_DEFAULT_VTABLE_9;
void * driver_vtable_discard[DRIVER_DEFAULT_VTABLE_SIZE] = DRIVER_DEFAULT_VTABLE_DISCARD;
void ** driver_itable[16] = { driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_5, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_9, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard, driver_vtable_discard };

void  driver_server(void)

{
  L4_ThreadId_t  partner;
  L4_MsgTag_t  msgtag;
  idl4_msgbuf_t  msgbuf;
  long  cnt;


	// STartup
        clear_name_database();

        IF_LOGGING_LogMessage((CORBA_Object)loggerid, "[DRIVER] Registering", &env);

        nameserver_register("/driver");

        IF_LOGGING_LogMessage((CORBA_Object)loggerid, "[DRIVER] Registered...", &env);

	// IPC loop
  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < DRIVER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(1024), 1024);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, driver_itable[idl4_get_interface_id(&msgtag) & DRIVER_IID_MASK][idl4_get_function_id(&msgtag) & DRIVER_FID_MASK]);
        }
    }
}

void  driver_discard(void)

{
}

