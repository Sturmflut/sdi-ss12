/*****************************************************************
 * Source file : minipager.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 23/08/2012 09:35
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <sdi/sdi.h>
#include <sdi/constants.h>
#include <l4io.h>
#include "minipager-server.h"

/* Interface minipager */

IDL4_INLINE void  minipager_pagefault_implementation(CORBA_Object  _caller, const L4_Word_t  address, const L4_Word_t  ip, const L4_Word_t  privileges, idl4_fpage_t * page, idl4_server_environment * _env)

{
        L4_Word_t page_bits = lsBit (L4_PageSizeMask ((L4_KernelInterfacePage_t*)L4_KernelInterface ()));

        printf ("Pager got msg from %lx (%p, %p)\n",
            _caller.raw, (void *) address, (void *) ip);

        /* This is really ugly, we just touch this address to bring 
        the page into our address space */
        volatile char* dummy = (char *)address;
        *dummy;


        /* Send mapitem, unless the recipient resides the same address space */
        if (!L4_IsLocalId(_caller))
        {
                idl4_fpage_set_base(page, address);
                idl4_fpage_set_mode(page, IDL4_MODE_MAP);
                idl4_fpage_set_page(page, L4_FpageLog2 (address, page_bits));
                idl4_fpage_set_permissions(page, IDL4_PERM_READ|IDL4_PERM_WRITE|IDL4_PERM_EXECUTE);
        }

}

IDL4_PUBLISH_MINIPAGER_PAGEFAULT(minipager_pagefault_implementation);

void * minipager_ktable[MINIPAGER_DEFAULT_KTABLE_SIZE] = MINIPAGER_DEFAULT_KTABLE;

void  minipager_server(void)

{
  L4_ThreadId_t  partner;
  L4_MsgTag_t  msgtag;
  idl4_msgbuf_t  msgbuf;
  long  cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < MINIPAGER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, minipager_ktable[idl4_get_kernel_message_id(msgtag) & MINIPAGER_KID_MASK]);
        }
    }
}

void  minipager_discard(void)

{
}

