/*****************************************************************
 * Source file : nameserver.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 17/08/2012 12:17
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <sdi/sdi.h>
#include <sdi/constants.h>
#include <l4io.h>
#include "nameserver-server.h"

#include <if/iflogging.h>

/* Interface nameserver */
typedef struct {
        char path[SDI_NAMESERVER_MAX_ENTRY_LEN + 1];
        L4_ThreadId_t registrant;
} name_entry_t;

name_entry_t names[SDI_NAMESERVER_MAX_ENTRIES];

L4_ThreadId_t loggerid;
CORBA_Environment env(idl4_default_environment);

/**
   Find the next free name database entry

   @return index on success, -1 if database full
 */
int find_free_entry()
{
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++)
                if (names[i].registrant == L4_nilthread)
                        return i;

        return -1;
}


IDL4_INLINE void  nameserver_register_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
        int i = find_free_entry();

        if (i >= 0) {
                strncpy(names[i].path, path, SDI_NAMESERVER_MAX_ENTRY_LEN);
                names[i].registrant = _caller;
        }else {
        // We can't safely use the logger-server here, because it might
        // not exist yet. Also, we can't use printf here, because it
        // causes weird problems when using printf outside of the root
        // task.
                //printf("[NAMESERVER] Error: Could not register thread %lx for path \"%s\", database full\n", _caller.raw, path);
    }

        return;
}

IDL4_PUBLISH_NAMESERVER_REGISTER(nameserver_register_implementation);

IDL4_INLINE void  nameserver_deregister_implementation(CORBA_Object  _caller, idl4_server_environment * _env)

{
        /* Remove all entries for the caller thread */
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++)
                if (names[i].registrant == _caller) {
                        names[i].registrant = L4_nilthread;
                        names[i].path[0] = '\0';
                }

        return;
}

IDL4_PUBLISH_NAMESERVER_DEREGISTER(nameserver_deregister_implementation);

IDL4_INLINE L4_ThreadId_t  nameserver_Lookup_implementation(CORBA_Object  _caller, const path_t  path, path_t * remaining, idl4_server_environment * _env)

{
        /* Is someone looking for me? */
        if(strlen(path) == 0 || (strlen(path) == 1 && path[0] == '/'))
        {
                *remaining = '\0';
                return L4_Myself();
        }

        /* Find the first database entry matching the query */
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++)
                if (strncmp(path, names[i].path, strlen(names[i].path)) == 0) {
                        strcpy(*remaining, &path[strlen(names[i].path)]);
                        return names[i].registrant;
                }

        strcpy(*remaining, path);

        return L4_nilthread;
}

IDL4_PUBLISH_NAMESERVER_LOOKUP(nameserver_Lookup_implementation);

void * nameserver_vtable_4[NAMESERVER_DEFAULT_VTABLE_SIZE] = NAMESERVER_DEFAULT_VTABLE_4;
void * nameserver_vtable_5[NAMESERVER_DEFAULT_VTABLE_SIZE] = NAMESERVER_DEFAULT_VTABLE_5;
void * nameserver_vtable_discard[NAMESERVER_DEFAULT_VTABLE_SIZE] = NAMESERVER_DEFAULT_VTABLE_DISCARD;
void ** nameserver_itable[8] = { nameserver_vtable_discard, nameserver_vtable_discard, nameserver_vtable_discard, nameserver_vtable_discard, nameserver_vtable_4, nameserver_vtable_5, nameserver_vtable_discard, nameserver_vtable_discard };

void  nameserver_server(void)

{
  L4_ThreadId_t  partner;
  L4_MsgTag_t  msgtag;
  idl4_msgbuf_t  msgbuf;
  long  cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < NAMESERVER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(1024), 1024);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, nameserver_itable[idl4_get_interface_id(&msgtag) & NAMESERVER_IID_MASK][idl4_get_function_id(&msgtag) & NAMESERVER_FID_MASK]);
        }
    }
}

void  nameserver_discard(void)

{
}

void clear_name_database()
{
        for (int i = 0; i < SDI_NAMESERVER_MAX_ENTRIES; i++) {
                names[i].path[0] = '\0';
                names[i].registrant = L4_nilthread;
        }
}


int main(void)
{
        clear_name_database();

        nameserver_server();
}

