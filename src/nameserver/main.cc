/*****************************************************************
 * Source file : nameserver.idl
 * Platform    : V4 IA32
 * Mapping     : CORBA C
 * 
 * Generated by IDL4 1.1.0 (roadrunner) on 09/07/2012 15:36
 * Report bugs to haeberlen@ira.uka.de
 *****************************************************************/

#include <idl4glue.h>
#include "nameserver-server.h"
#include <l4/types.h>
#include <l4io.h>
#include <sdi/sdi.h>

/* Interface nameserver */

IDL4_INLINE void  nameserver_register_implementation(CORBA_Object  _caller, const path_t  path, idl4_server_environment * _env)

{
  /* implementation of nameserver::register */
  
  return;
}

IDL4_PUBLISH_NAMESERVER_REGISTER(nameserver_register_implementation);

IDL4_INLINE void  nameserver_deregister_implementation(CORBA_Object  _caller, idl4_server_environment * _env)

{
  /* implementation of nameserver::deregister */
  
  return;
}

IDL4_PUBLISH_NAMESERVER_DEREGISTER(nameserver_deregister_implementation);

IDL4_INLINE void  nameserver_Lookup_implementation(CORBA_Object  _caller, const path_t  path, path_t * remaining, idl4_server_environment * _env)

{
  /* implementation of IF_NAMING::Lookup */
  
  return;
}

IDL4_PUBLISH_NAMESERVER_LOOKUP(nameserver_Lookup_implementation);

void * nameserver_vtable_0[NAMESERVER_DEFAULT_VTABLE_SIZE] = NAMESERVER_DEFAULT_VTABLE_0;
void * nameserver_vtable_4[NAMESERVER_DEFAULT_VTABLE_SIZE] = NAMESERVER_DEFAULT_VTABLE_4;
void * nameserver_vtable_discard[NAMESERVER_DEFAULT_VTABLE_SIZE] = NAMESERVER_DEFAULT_VTABLE_DISCARD;
void ** nameserver_itable[8] = { nameserver_vtable_0, nameserver_vtable_discard, nameserver_vtable_discard, nameserver_vtable_discard, nameserver_vtable_4, nameserver_vtable_discard, nameserver_vtable_discard, nameserver_vtable_discard };

void  nameserver_server(void)

{
  L4_ThreadId_t  partner;
  L4_MsgTag_t  msgtag;
  idl4_msgbuf_t  msgbuf;
  long  cnt;

  idl4_msgbuf_init(&msgbuf);
  for (cnt = 0;cnt < NAMESERVER_STRBUF_SIZE;cnt++)
    idl4_msgbuf_add_buffer(&msgbuf, malloc(8000), 8000);

  while (1)
    {
      partner = L4_nilthread;
      msgtag.raw = 0;
      cnt = 0;

      while (1)
        {
          idl4_msgbuf_sync(&msgbuf);

          idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);

          if (idl4_is_error(&msgtag))
            break;

          idl4_process_request(&partner, &msgtag, &msgbuf, &cnt, nameserver_itable[idl4_get_interface_id(&msgtag) & NAMESERVER_IID_MASK][idl4_get_function_id(&msgtag) & NAMESERVER_FID_MASK]);
        }
    }
}

void nameserver_discard()
{
}


int main(void)
{
	printf("Starting nameserver...\n");

	nameserver_server();

	return 0;
}

