
	.section .text.init

	.global _start
_start:

	/* This is the third version to start.
	   We know that we are linked against shadow, therfore
	   we do not need any checkups here */

	/* clearing .bss segment, since we can not assume it is zero */
	/* not needed since we are using sys mem or core mem  */
/*	leal	__section_bss_start,%esi
	mov	%esi,%edi
	inc	%edi
	leal	__section_bss_end,%ecx
	subl	%edi,%ecx
	movb	$0,(%esi)
	rep	movsb */ 
       
        /* Start the constructors of global objects (supporting C++) */
        leal __section_ctors_start, %ebx
2:
        cmp $__section_ctors_end, %ebx
        je 3f
	call *(%ebx)
	add $4,%ebx
	jmp 2b
3:

	/* push a return address to catch main ending (should never happen) */
	pushl	$___return_from_main
	jmp	main /* call main() */

___return_from_main:
        /* run the destructors of global objects (supporting C++) */
        leal __section_dtors_start, %ebx
5:
        cmp $__section_dtors_end, %ebx
        je 6f
	call *(%ebx)
	add $4,%ebx
	jmp 5b
6:

abortthread:
	/* call threadend here */
	xor	%eax,%eax
	mov	%eax,(%eax)
	jmp abortthread
	

